Program Sequence:

Class Info
	str	projectName
	str	language
	int	amountSourceCodeFiles
	str	nameSourceCodeFiles
	int	amountHeaderfiles
	str	namesHeaderfiles
	int	amountClasses
	str	classNames

	getProjectName()
	getLanguage()
	getNumSourceCodeFiles()
	getNamesSourceCodeFiles()
	getNumHeaderfiles()
	getNamesHeaderfiles()
	getNumClasses()
	getClassName()

Function getProjectDetails()
	- get project name
	- get the language of the project
	- get the amount and name of source files
	- get the amount and name of headerfiles
	- get the amount of classes in the project
	- get the names of the classes

Function createAllFiles()
	createAllSourceFiles();
	createAllClassFiles();
	createMakefile();

getProjectDetails();
createAllDirectories();
createAllFiles();


When expanding your automated software project creator to support different programming languages, it's a good idea to structure your code in a way that allows for easy extensibility and maintainability. Here's a suggested approach to achieve this:

Create a base class: Start by creating a base class, let's call it ProjectCreator, that contains common functionality and properties shared by all programming languages. This class will handle the creation of directories, files, and their content.

Inherit from the base class: Create separate classes for each programming language you want to support, such as CppProjectCreator, CProjectCreator, PythonProjectCreator, and ArduinoProjectCreator. Each of these classes will inherit from the ProjectCreator base class.

Override methods: In each child class, override the necessary methods from the base class to customize the behavior specific to that programming language. For example, you might need to override the create_files method to generate language-specific code templates.

Maintain language-specific data: You can still use your existing data class to store project information. However, you may need to expand its capabilities to handle language-specific details, such as different file extensions, library dependencies, or project configurations. Consider adding language-specific properties or even separate classes to manage this data.

Utilize polymorphism: With this structure in place, you can now utilize polymorphism to handle different project types. In your main.py, create an instance of the appropriate project creator class based on the selected programming language. You can then call the methods defined in the base class without worrying about the underlying implementation.

By using this approach, you can easily add support for new programming languages by creating a new class that inherits from the base class and overriding the necessary methods. This ensures that your code remains modular and flexible as you expand its capabilities.
